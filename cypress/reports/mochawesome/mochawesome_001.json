{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-09T00:13:34.614Z",
    "end": "2024-10-09T00:13:58.699Z",
    "duration": 24085,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "18c5433e-ea12-4e8a-9203-bc0868e15c47",
      "title": "",
      "fullFile": "cypress\\integration\\authspec.js",
      "file": "cypress\\integration\\authspec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f604fd99-9364-4069-9d57-ee66ab741a28",
          "title": "API Testing for Registration and Login",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC01 - Verify user registration with valid details",
              "fullTitle": "API Testing for Registration and Login TC01 - Verify user registration with valid details",
              "timedOut": null,
              "duration": 3151,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstName = 'Jane';\nconst lastName = 'Doe';\nconst email = `jane.doe+${Date.now()}@example.com`; // Unique email\nconst password = 'SecurePassword123!';\n_AuthPage.default.register(firstName, lastName, email, password).then(response => {\n  expect(response.status).to.eq(200); // Assuming 200 is the expected status for a successful registration\n});",
              "err": {},
              "uuid": "d180c8e6-77d8-46f2-a614-5482aa539c2e",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC02 - Verify user registration with a registered email address",
              "fullTitle": "API Testing for Registration and Login TC02 - Verify user registration with a registered email address",
              "timedOut": null,
              "duration": 2666,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstName = 'Jane';\nconst lastName = 'Doe';\nconst email = \"brenon@duckdocks.org\";\nconst password = 'SecurePassword123!';\n_AuthPage.default.register(firstName, lastName, email, password).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.have.property('error');\n  expect(response.body.error).to.have.property('warning', 'Warning: E-Mail Address is already registered!');\n});",
              "err": {},
              "uuid": "89c75db6-f0d1-49ed-bfca-0e3a5e6c2735",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC03 - Verify registration with missing email field",
              "fullTitle": "API Testing for Registration and Login TC03 - Verify registration with missing email field",
              "timedOut": null,
              "duration": 2521,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstName = 'Jane';\nconst lastName = 'Doe';\nconst email = \"\";\nconst password = 'SecurePassword123!';\n_AuthPage.default.register(firstName, lastName, email, password).then(response => {\n  expect(response.status).to.eq(200); // 200 is returned even for Bad requests on saucelabs website\n  expect(response.body).to.have.property('error');\n  expect(response.body.error).to.have.property('email', 'E-Mail Address does not appear to be valid!');\n});",
              "err": {},
              "uuid": "e082f281-5ca4-4129-94e8-74d5fd320d40",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC04 - Verify user registration with missing password field",
              "fullTitle": "API Testing for Registration and Login TC04 - Verify user registration with missing password field",
              "timedOut": null,
              "duration": 2501,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstName = 'Jane';\nconst lastName = 'Doe';\nconst email = `jane.doe+${Date.now()}@example.com`;\nconst password = '';\n_AuthPage.default.register(firstName, lastName, email, password).then(response => {\n  expect(response.status).to.eq(200); // 200 is returned even for Bad requests on saucelabs website\n  expect(response.body).to.have.property('error');\n  expect(response.body.error).to.have.property('password', 'Password must be between 4 and 20 characters!');\n});",
              "err": {},
              "uuid": "bf56a23e-50fa-4c5e-97b6-cfb65f36f6d1",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC05 - Verify user registration with missing policy",
              "fullTitle": "API Testing for Registration and Login TC05 - Verify user registration with missing policy",
              "timedOut": null,
              "duration": 2509,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstName = 'Jane';\nconst lastName = 'Doe';\nconst email = `jane.doe+${Date.now()}@example.com`;\nconst password = 'SecuredPassword';\n_AuthPage.default.register2(firstName, lastName, email, password).then(response => {\n  expect(response.status).to.eq(200); // 200 is returned even for Bad requests on saucelabs website\n  expect(response.body).to.have.property('error');\n  expect(response.body.error).to.have.property(\"warning\", \"Warning: You must agree to the Privacy Policy!\");\n});",
              "err": {},
              "uuid": "2e7add82-071b-44a4-beba-fc98d702dd80",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC06 - Verify user login with valid credentials",
              "fullTitle": "API Testing for Registration and Login TC06 - Verify user login with valid credentials",
              "timedOut": null,
              "duration": 2608,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = 'brenon@duckdocks.org';\nconst password = 'Password';\n_AuthPage.default.login(email, password).then(response => {\n  expect(response.status).to.eq(200); // Assert successful login\n});",
              "err": {},
              "uuid": "f676a445-c5b3-489c-9bc1-203f720f85c0",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC07 - Verify unsuccessful login with invalid credentials",
              "fullTitle": "API Testing for Registration and Login TC07 - Verify unsuccessful login with invalid credentials",
              "timedOut": null,
              "duration": 2534,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidEmail = 'invalid.email@example.com';\nconst invalidPassword = 'WrongPassword';\n_AuthPage.default.login(invalidEmail, invalidPassword).then(response => {\n  expect(response.status).to.eq(200); // Opencart might return 200 even for errors\n  expect(response.body).to.have.property('error');\n  expect(response.body.error).to.have.property('warning', 'Warning: No match for E-Mail Address and/or Password.');\n});",
              "err": {},
              "uuid": "572c690c-4858-48d4-8046-586e62f4598d",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC08 - Verify unsuccessful login with missing ppassword",
              "fullTitle": "API Testing for Registration and Login TC08 - Verify unsuccessful login with missing ppassword",
              "timedOut": null,
              "duration": 2474,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = `jane.doe+${Date.now()}@example.com`;\nconst password = '';\n_AuthPage.default.login(email, password).then(response => {\n  expect(response.status).to.eq(200); // Opencart might return 200 even for errors\n  expect(response.body).to.have.property('error');\n  expect(response.body.error).to.have.property('warning', 'Warning: No match for E-Mail Address and/or Password.');\n});",
              "err": {},
              "uuid": "71f6e4be-2352-487a-bce3-d398488cd96e",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC09 - Verify unsuccessful login with missing email address",
              "fullTitle": "API Testing for Registration and Login TC09 - Verify unsuccessful login with missing email address",
              "timedOut": null,
              "duration": 2462,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = ``;\nconst password = 'P1ssw4rd0';\n_AuthPage.default.login(email, password).then(response => {\n  expect(response.status).to.eq(200); // Opencart might return 200 even for errors\n  expect(response.body).to.have.property('error');\n  expect(response.body.error).to.have.property('warning', 'Warning: No match for E-Mail Address and/or Password.');\n});",
              "err": {},
              "uuid": "4ce7b276-04b9-446e-94d6-8eb3017d3ca3",
              "parentUUID": "f604fd99-9364-4069-9d57-ee66ab741a28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d180c8e6-77d8-46f2-a614-5482aa539c2e",
            "89c75db6-f0d1-49ed-bfca-0e3a5e6c2735",
            "e082f281-5ca4-4129-94e8-74d5fd320d40",
            "bf56a23e-50fa-4c5e-97b6-cfb65f36f6d1",
            "2e7add82-071b-44a4-beba-fc98d702dd80",
            "f676a445-c5b3-489c-9bc1-203f720f85c0",
            "572c690c-4858-48d4-8046-586e62f4598d",
            "71f6e4be-2352-487a-bce3-d398488cd96e",
            "4ce7b276-04b9-446e-94d6-8eb3017d3ca3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23426,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}